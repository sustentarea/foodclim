; __includes ["check-string.nls" "check-true.nls"]

; globals [
;   *-intercept
;   *-tmin-beta
;   *-tmax-beta
;   *-prec-beta
;   *-lat-beta
;   *-lon-beta
;   *-random-threshold
;   add-random?
;   shock
;   shock-threshold
;   temp
; ]

to compute-food-yield [#food]
  ask patches with [
    (runresult (word #food "-yield") <= 0) or
    (runresult (word #food "-yield") >= 0)
  ] [
    let random-mult 1
    let intercept runresult (word #food "-intercept")
    let tmin-beta runresult (word #food "-tmin-beta")
    let tmax-beta runresult (word #food "-tmax-beta")
    let prec-beta runresult (word #food "-prec-beta")
    let lat-beta runresult (word #food "-lat-beta")
    let lon-beta runresult (word #food "-lon-beta")

    if (is-true? add-random?) [
      let random-threshold runresult (word #food "-" "random-threshold")
      set random-mult random-float random-threshold

      ifelse (random-float 1 < 0.5) [
        set random-mult 1 - random-mult
      ] [
        set random-mult 1 + random-mult
      ]
    ]

    ifelse (
      ((tmin <= 0) or (tmin >= 0)) and
      ((tmax <= 0) or (tmax >= 0)) and
      ((prec <= 0) or (prec >= 0))
     ) [
      set temp (
        intercept +
        (tmin-beta * tmin) + (tmax-beta * tmax) + (prec-beta * prec) +
        (lat-beta * latitude) + (lon-beta * longitude)
      ) * random-mult

      if (is-true? shock) [
        set random-mult random-float shock-threshold
        set temp temp * (1 - random-mult)
      ]

      if (temp < 0) [set temp 0]

      run (word "set " #food "-yield temp")
    ] [
      set temp tmin

      run (word "set " #food "-yield temp")
    ]
  ]
end
