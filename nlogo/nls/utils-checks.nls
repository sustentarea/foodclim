; This file is part of the model:
; FoodClim: Simulating Food Yield Responses to Climate Change in Netlogo
; Extensions used: pathdir` and `sr`.

; # Halt Functions

to halt
  error (word
    "The model stopped running due "
    "to the reason presented in the "
    "last dialog window."
  )
end

; # Test Functions

to-report all-true? [#list]
  assert-list #list

  report reduce [[i j] -> i and j] #list
end

to-report any-true? [#list]
  assert-list #list

  report reduce [[i j] -> i or j] #list
end

to-report is-atomic? [#x]
  report not is-list? #x
end

to-report is-gis? [#x]
  let test true

  carefully [
    let dummy gis:type-of #x
  ] [
    set test false
  ]

  report test
end

to-report is-integer? [#x]
  ifelse (not is-number? #x) [
    report false
  ] [
    report (int #x) = #x
  ]
end

to-report is-logical? [#x]
  report #x = true or #x = false
end

to-report fix-string-for-r [#path]
  assert-atomic #path

  let test true
  set #path as-character #path

  carefully [
    let r-test sr:runresult (word "'" #path "'")
  ] [
    set test false
  ]

  ifelse (test = false) [
    let separator pathdir:get-separator
    let double-separator rep-collapse separator 2
    let str-split string:split-on separator #path

    if (last str-split = "") [
      set str-split but-last str-split
    ]

    report collapse str-split double-separator
  ] [
    report #path
  ]
end

to-report test-string-in-r [#string]
  assert-string #string

  let test true

  carefully [
    let r-test sr:runresult (word "'" #string "'")
  ] [
    set test false
  ]

  report test
end

; # Assert Functions

to assert-atomic [#x]
  if (not is-atomic? #x) [
    error "The value is not atomic."
  ]
end

to assert-dir-exists [#dir]
  assert-string #dir

  if (not pathdir:isDirectory? #dir) [
    error (word
      "The directory" #dir "does not exist."
    )
  ]
end

to assert-file-exists [#file]
  assert-string #file

  if (not file-exists? #file) [
    error (word "The file " #file "does not exist.")
  ]
end

to assert-gis [#x]
  if (not is-gis? #x) [
    error "The value is not a GIS dataset."
  ]
end

to assert-integer [#x]
  if (not is-integer? #x) [
    error "The value is not an integer number."
  ]
end

to assert-list [#x]
  if (not is-list? #x) [
    error "The value is not a list."
  ]
end

to assert-logical [#x]
  if (not is-logical? #x) [
    error "The value is not logical/boolean."
  ]
end

to assert-number [#x]
  if (not is-number? #x) [
    error "The value is not a number."
  ]
end

to assert-string [#x]
  if (not is-string? #x) [
    error "The value is not a string."
  ]
end

to assert-string-or-integer [#x]
  if (not is-string? #x and not is-integer? #x) [
    error "The value is neither a string nor an integer number."
  ]
end

to assert-string-or-number [#x]
  if (not is-string? #x and not is-number? #x) [
    error "The value is neither a string nor a number."
  ]
end
